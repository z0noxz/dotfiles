" TODO ::
" * some sort of macro for 'make', 'groff' etc...?

"XDG {{{
if empty("$XDG_CACHE_HOME")
    let $XDG_CACHE_HOME="$HOME/.cache"
endif

if empty("$XDG_CONFIG_HOME")
    let $XDG_CONFIG_HOME="$HOME/.config"
endif

if empty("$XDG_DATA_HOME")
    let $XDG_DATA_HOME="$HOME/.local/share"
endif

set directory=$XDG_CACHE_HOME/vim/swap,~/,/tmp
set backupdir=$XDG_CACHE_HOME/vim/backup,~/,/tmp
set undodir=$XDG_CACHE_HOME/vim/undo,~/,/tmp
set viminfo+=n$XDG_CACHE_HOME/vim/viminfo
set runtimepath+=$XDG_CONFIG_HOME/vim,$XDG_CONFIG_HOME/vim/after,$VIM,$VIMRUNTIME
"}}}

" load plugins {{{
runtime plugins/vim-status/vim-status.vim
runtime plugins/vim-tabline/vim-tabline.vim
runtime plugins/vim-dfm/vim-dfm.vim
" }}}

" generic settings {{{
syntax enable                   " enable syntax highlighting
let mapleader = "\<Space>"      " lead with space
set nocompatible                " use more features
set path+=**                    " search down into subfolders
set wildmenu                    " display all matches when tab complete
set t_Co=256                    " use 256 colors
set number                      " line numbers
set relativenumber              " relative line numbers
set cursorline                  " colored cursor line
set colorcolumn=80              " color column at 80 characters
set textwidth=79                " set text width to 79 characters
set showcmd                     " show incomplete commands
set fileformat=unix             " use <NL> only like a normal person
set backspace=indent,eol,start  " backspace through everything in insert mode
set list lcs=tab:»·,trail:·     " highligt tabs and trailing spaces
set formatoptions+=tcrowanl     " word and comment wrapping
set encoding=utf-8              " use utf-8 encoding
set title                       " use 'titlestring' as window title
set viminfo+=n~/.data/viminfo   " change location of .viminfo
" }}}

" colors {{{
hi Cursor           ctermbg=none    ctermfg=none    cterm=reverse
hi CursorLine       ctermbg=5       ctermfg=none    cterm=none
hi ColorColumn      ctermbg=5       ctermfg=none    cterm=none
hi Folded           ctermbg=5       ctermfg=2       cterm=none
hi FoldColumn       ctermbg=0       ctermfg=2       cterm=none
hi SignColumn       ctermbg=0       ctermfg=2       cterm=none
hi StatusLine       ctermbg=5       ctermfg=6       cterm=none
hi StatusLineNC     ctermbg=5       ctermfg=6       cterm=none
hi WildMenu         ctermbg=6       ctermfg=5       cterm=none
hi Visual           ctermbg=5       ctermfg=15      cterm=none
hi TabLine          ctermbg=5       ctermfg=2       cterm=none
hi TabLineFill      ctermbg=0       ctermfg=6       cterm=none
hi TabLineSel       ctermbg=5       ctermfg=6       cterm=none
hi TabLineNum       ctermbg=2       ctermfg=5       cterm=none
hi TabLineNumSel    ctermbg=6       ctermfg=5       cterm=none
hi TabLineSep       ctermbg=0       ctermfg=6       cterm=none
hi TabLineDir       ctermbg=6       ctermfg=5       cterm=none
hi SpellBad         ctermbg=1       ctermfg=15      cterm=italic
hi SpellCap         ctermbg=14      ctermfg=15      cterm=italic
hi SpellLocal       ctermbg=11      ctermfg=15      cterm=italic
hi SpellRare        ctermbg=10      ctermfg=5       cterm=italic
hi SpecialKey       ctermbg=5       ctermfg=15      cterm=italic
hi Search           ctermbg=5       ctermfg=6       cterm=bold
hi Pmenu            ctermbg=5       ctermfg=6       cterm=none
hi PmenuSel         ctermbg=6       ctermfg=5       cterm=none
hi PmenuSbar        ctermbg=2       ctermfg=none    cterm=none
hi PmenuThumb       ctermbg=6       ctermfg=none    cterm=none
hi LineNr           ctermbg=0       ctermfg=2       cterm=none
hi CursorLineNr     ctermbg=0       ctermfg=2       cterm=none
hi NonText          ctermbg=0       ctermfg=2       cterm=none
hi Constant         ctermbg=0       ctermfg=1       cterm=none
hi PreProc          ctermbg=0       ctermfg=1       cterm=none
hi Special          ctermbg=0       ctermfg=11      cterm=none
hi Title            ctermbg=0       ctermfg=11      cterm=none
hi Type             ctermbg=0       ctermfg=13      cterm=none
hi Underlined       ctermbg=0       ctermfg=11      cterm=underline
" }}}

" cursor line in insert mode {{{
autocmd InsertEnter * hi CursorLine ctermbg=none    ctermfg=none
autocmd InsertLeave * hi CursorLine ctermbg=5       ctermfg=none
"}}}

" remember last position {{{
autocmd BufReadPost * silent! normal! g`"zv
" }}}

" timeout settings {{{
set timeout                     " timeout on mappings
set ttimeout                    " timeout on sequence
set timeoutlen=3000             " wait 3s to finish left-hand-side of a mapping
set ttimeoutlen=50              " only wait 50ms for a sequence to finish
" }}}

" tab jumping by mapping alt/meta+n to n+gt {{{
for i in range(1, 9)
    exec "nmap \e" . i . " <M-" . i . ">"
    exec "nmap \<M-" . i . "> " . i . "gt"
endfor
" }}}

" searching {{{
set hlsearch                    " highlight matches
set incsearch                   " incremental searching
set ignorecase                  " searches are case insensitive...
set smartcase                   " ...unless containing at least one capital letter
" }}}

" folding {{{
set foldmethod=marker
nnoremap <silent> <leader><space> za
"}}}

" key mappings {{{
nnoremap B ^
nnoremap E $
nnoremap <silent> <leader>f :LiteDFMToggle<CR>
" }}}

" auto compile {{{
map <leader>c :w! \| silent !compile <c-r>%<CR><Esc>:redraw!<CR>
"}}}

" tab settings {{{
set tabstop=4                   " tab equals 4 spaces
set softtabstop=4               " soft tab equals 4 spaces
set shiftwidth=4                " use 4 spaces for indentations
set expandtab                   " use spaces instead of tabs
set autoindent                  " copy indent from current line to next
set shiftround                  " round indent of multiple of 'shiftwidth'
" }}}

" autocomplete {{{
function! Tab_Or_Complete(reverse)
    if col('.')>1 && strpart( getline('.'), col('.')-2, 3 ) =~ '^\w'
        if (a:reverse)
            return "\<C-p>"
        else
            return "\<C-n>"
        endif
    else
        if (a:reverse)
            return "\<C-d>"
        else
            return "\<Tab>"
        elseif
    endif
endfunction

set dictionary+=/usr/share/dict/words
set complete-=k
inoremap <silent> <tab> <C-r>=Tab_Or_Complete(0)<CR>
inoremap <silent> <S-tab> <C-r>=Tab_Or_Complete(1)<CR>
if (&ft=='text' || &ft=='md' || &ft=='')
    set complete+=k
endif
" }}}

" disable editing for read-only files {{{
function! ReadOnlyNoEdit()
    if &readonly == 1
        set nomodifiable
    else
        set modifiable
    endif
endfunction

autocmd BufRead * call ReadOnlyNoEdit()
" }}}

" clipboard through xclip {{{
vnoremap <silent> <leader>y
    \ y:call system("xclip -i -selection clipboard", @")<cr>
nnoremap <silent> <leader>p
    \ :call setreg(@",system("xclip -o -selection clipboard"))<cr>p
" }}}

" backup and swap files {{{
set backupdir=~/.data/vimtmp,.
set dir=~/.data/vimtmp//,.
" }}}

" filetype specific settings {{{
filetype detect
if (&ft == 'c' || &ft == 'cpp')
    " syntax folding
    set foldmethod=syntax
    set foldnestmax=10
    set nofoldenable
    set foldlevel=2

    " disable wrapping
    set formatoptions-=t
    set nowrap
elseif (&ft == ''
\|| &ft == 'sh'
\|| &ft == 'vim'
\|| &ft == 'muttrc'
\|| &ft == 'tmux')
    " disable wrapping
    set formatoptions-=t
elseif (&ft == 'make')
    set formatoptions-=t        " disable wrapping
    set noexpandtab             " make requires tabs as separators
endif
" }}}

" save as root {{{
command W
    \ :execute ':silent w !sudo tee % > /dev/null'
    \ | :edit!
" }}}

function! ExpandOrEmpty(name)
    try
        return expand(a:name)
    catch
        return ""
    endtry
endfunction

"""" Move to separate "plugin" file
function! FZFExec(fnc, input, opt)
    let tempfile = tempname()
    exe '!' . a:input . ' | fzf ' . a:opt . ' > ' . shellescape(tempfile)
    try
        let content = readfile(tempfile, '', -1)
        if len(content) > 0
            let value = content[0]
            if value != ""
                exe a:fnc . ' ' . value
            endif
        endif
    catch " do nothing
    finally
        call delete(tempfile)
    endtry
endfunction

" if expand("%:p:h") !~ '^/tmp' | silent! lcd %:p:h | endif
command! -nargs=1 FZFFile
\ | execute ':silent call FZFExec('
    \ . '<q-args>'
    \ . ',"find ' . ExpandOrEmpty("%:p:h") . ' 2>/dev/null"'
    \ . ',"--layout=reverse-list"'
    \ . ')'
\ | execute ':redraw!'

nnoremap <F7> :FZFFile open<CR>
nnoremap <F8> :FZFFile tabnew<CR>
